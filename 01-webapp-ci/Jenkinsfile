pipeline {
    agent { 
        dockerfile {
            filename 'build.Dockerfile'
            args '-v /var/lib/jenkins/tools:/var/lib/jenkins/tools -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }
    environment {
        // Override HOME to WORKSPACE value
        HOME = "${WORKSPACE}"
        // or override npm's cache directory (~/.npm)
        NPM_CONFIG_CACHE = "${WORKSPACE}/.npm"
        // Sonar Scanner
        SONAR_SCANNER = tool name: 'sonar-scanner', type: 'hudson.plugins.sonar.SonarRunnerInstallation'

        IMAGE_REPO_URI = "<account-id>.dkr.ecr.<region>.amazonaws.com"
        IMAGE_REPO_NAME = "<image-repo-name>"

        AWS_REGION = "<region>"
    }
    stages {
        stage('NPM: Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }
        stage('NPM: Run Unit Tests') {
            steps {
                sh 'npm test'
            }
        }
        stage('SonarQube: Static Code Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'sonar-server') {
                    sh "${SONAR_SCANNER}/bin/sonar-scanner -Dsonar.projectName=<project-name> -Dsonar.projectKey=<project-key>"
                }
            }
        }
        stage("SonarQube: Quality Gate Check") {
            steps {
              timeout(time: 300, unit: 'SECONDS') {
                waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token' 
              }
            }
        }
        stage("OWASP: Dependency Check ") {
            environment {
                NVD_API_KEY = credentials('nvd-apikey')
            }
            steps {
              dependencyCheck odcInstallation: 'dependency-check', additionalArguments : "--scan ./ --disableNodeAudit --nodeAuditSkipDevDependencies --nvdApiKey ${NVD_API_KEY}"
              dependencyCheckPublisher pattern: 'dependency-check-report.xml'
            }
        }
        stage('Trivy: File System Scan') {
            steps {
                sh 'trivy filesystem . -f json -o trivy-fs-scan.json'
            }
        }
        stage('Docker: Build Image') {
            steps {
                script {
                    image = docker.build("${IMAGE_REPO_URI}/${IMAGE_REPO_NAME}", "-f app.Dockerfile .")
                    image.tag("${BUILD_NUMBER}")
                }
            }
        }
        stage('Trivy: Image Scan') {
            steps {
                sh "trivy image ${IMAGE_REPO_URI}/${IMAGE_REPO_NAME}:${BUILD_NUMBER} -f json -o trivy-image-scan.json"
            }
        }
        stage('ECR: Push Image to Registry') {
            steps {
                script {
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-creds', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                        sh "aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${IMAGE_REPO_URI}"
                    }
                    image.push("latest")
                    image.push("${BUILD_NUMBER}")
                }
            }
        }
        stage('Git: Checkout K8s Manifests') {
            steps {
                git branch: 'main', changelog: false, credentialsId: 'github-pat', poll: false, url: 'https://github.com/<username>/<repo-name>.git'
            }
        }
        stage('SHELL: Update K8s Manifests') {
            steps {
                script {
                    sh '''
                        sed -i "s/appVersion: .*/appVersion: ${BUILD_NUMBER}/" <folder-name>/Chart.yaml
                    '''
                }
            }
        }
        stage('Git: Push K8s Manifests') {
            steps {
                withCredentials([gitUsernamePassword(credentialsId: 'github-pat', gitToolName: 'Default')]) {
                   sh '''
                        git config user.email "<email>"
                        git config user.name "<name>"
                        git add .
                        git commit -m "Update image version to \${BUILD_NUMBER}"
                        git push -u origin main
                    '''
                }
            }
        }
    }
    post {
        always {
            script {
                emailext(
                    attachLog: true, 
                    body: "Check console output at ${BUILD_URL} to view the results.", 
                    subject: "${JOB_NAME} - Build # ${BUILD_NUMBER}", 
                    to: '<email>',
                    attachmentsPattern: 'trivy-fs-scan.json,trivy-image-scan.json'
                )
                sh "docker rmi -f ${IMAGE_REPO_URI}/${IMAGE_REPO_NAME}"
                sh "docker system prune -a -f"
            }
            cleanWs()
        }
    }
}